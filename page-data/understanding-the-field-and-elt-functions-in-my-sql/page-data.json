{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/understanding-the-field-and-elt-functions-in-my-sql","result":{"data":{"post":{"__typename":"MdxPost","slug":"/understanding-the-field-and-elt-functions-in-my-sql","title":"Understanding the field() and elt() Functions in MySQL","date":"21.02.2021","tags":[{"name":"MySQL","slug":"my-sql"}],"description":null,"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Understanding the field() and elt() Functions in MySQL\",\n  \"date\": \"2021-02-21T00:00:00.000Z\",\n  \"tags\": [\"MySQL\"]\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"What are the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"field()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elt()\"), \" functions used for in MySQL? I recently came across them when implementing a voting system and found them to be pretty useful for calculating min and max values from queries with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"group by\"), \" clauses.\"), mdx(\"p\", null, \"Let's assume we have a database table \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"user_membership\"), \" that records users and the memberships they belong to within an organization. A user can have multiple memberships (ie. there is a one-to-many relationship between users and memberships). Here are a few example rows from our contrived database table:\"), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"id\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"userId\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"membership\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"101\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"board\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"2\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"101\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"staff\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"3\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"102\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"staff\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"4\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"102\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"general\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"5\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"103\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"general\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"6\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"104\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"general\")))), mdx(\"p\", null, \"We can see that user 101 is a member of 'board' and 'staff', user 102 is a member of 'staff' and 'general', and user 103 and 104 have 'general' memberships.\"), mdx(\"p\", null, \"Now let's say we have a request from an analyst to retrieve the number of users by membership, but only counting users once by their priority membership (\\\"board\\\" > \\\"staff\\\" > \\\"general\\\"). In MySQL, we can achieve this by using \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_field\"\n  }), \"the \", mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"field()\"), \" function\"), \" and a subquery. The \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"field()\"), \" function will return the index position of a value (the first argument to the function) in a list of values (the following arguments to the function).\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"SELECT userId, membership AS priorityMembership FROM user_membership\\nWHERE field(membership, \\\"board\\\", \\\"staff\\\", \\\"general\\\") = (\\n  SELECT min(field(membership, \\\"board\\\", \\\"staff\\\", \\\"general\\\"))\\n  FROM user_membership t\\n  WHERE t.userId = user_membership.userId\\n)\\nGROUP BY userId;\\n\")), mdx(\"p\", null, \"However, there is a better way to achieve this same calculation which doesn't rely on a subquery. The \", mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://dev.mysql.com/doc/refman/8.0/en/string-functions.html#function_elt\"\n  }), mdx(\"inlineCode\", {\n    parentName: \"a\"\n  }, \"elt()\"), \" function\"), \" allows us to convert the index value back to the corresponding string at the index number specified in the list of arguments.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"SELECT\\n    userId,\\n    elt(min(field(membership, \\\"board\\\", \\\"staff\\\", \\\"general\\\")), \\\"board\\\", \\\"staff\\\", \\\"general\\\") AS priorityMembership,\\n    min(field(membership, \\\"board\\\", \\\"staff\\\", \\\"general\\\")) AS priorityMembership_integer\\nFROM user_membership\\nGROUP BY userId;\\n\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"userId\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"priorityMembership\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"priorityMembership_integer\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"101\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"board\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"102\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"staff\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"2\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"103\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"general\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"3\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"104\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"general\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"3\")))), mdx(\"p\", null, \"From there, we can easily count the numbers for our analyst by grouping on priority membership.\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-sql\"\n  }), \"SELECT priorityMembership, count(userId) as userCount\\nFROM (\\n  SELECT\\n      userId,\\n      elt(min(field(userGroup, \\\"board\\\", \\\"staff\\\", \\\"general\\\")), \\\"board\\\", \\\"staff\\\", \\\"general\\\") AS priorityMembership,\\n      min(field(userGroup, \\\"board\\\", \\\"staff\\\", \\\"general\\\")) AS priorityMembership_integer\\n  FROM user_membership\\n  GROUP BY userId\\n)\\nGROUP BY priorityMembership;\\n\")), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"priorityMembership\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"userCount\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"board\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"staff\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"general\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"2\")))), mdx(\"p\", null, \"A couple of gotchas to note about the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"field()\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elt()\"), \" functions:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"the indexing starts from the first argument to the function. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SELECT elt(3, 'banana', 'apple', 'orange');\"), \" will return 'orange' while \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"SELECT field('banana', 'banana', 'apple', 'orange')\"), \" will return 1.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"elt()\"), \" Returns NULL if the first argument is less than 1 or greater than the number of arguments.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"field()\"), \" returns 0 if the first argument is NULL because NULL fails equality comparison with any value.\")));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"What are the  field()  and  elt()  functions used for in MySQL? I recently came across them when implementing a voting system and found them…","timeToRead":1,"banner":null}},"pageContext":{"slug":"/understanding-the-field-and-elt-functions-in-my-sql","formatString":"DD.MM.YYYY"}},"staticQueryHashes":["1654422363","3090400250","3090400250"]}